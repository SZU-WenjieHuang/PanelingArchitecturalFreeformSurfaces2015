<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">c65703e5-9086-4587-95a6-2a7bd0025a29</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">635839233702712384</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">PanellingTest2.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>14</X>
                  <Y>85</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1.25</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">7</item>
          </items>
          <chunks count="7">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">a9a8ebd2-fff5-4c44-a8f5-739736d129ba</item>
                <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="AdditionalSource" type_name="gh_string" type_code="10">  public class Panelling
  {
    public static object Test() {
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) + Math.Cos(v)), 15, 15);
      var status = new PanellingStatus(target);
      Mold mold1, mold2;
      status.AddMold(mold1 = new Molds.Plane(15, 15));
      status.AddMold(mold2 = new Molds.CubicPolynomial(15, 15, 0, 0, 0, 0, 0, 0));
      status.AddPanel(new RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);
      status.CurveNetworks.AddRandomPointsOnSurface(target, 10);
      status.TryOptimizationTransform(1);
      return status.GetPanels();
    }

    public interface Mold : ParamaterProvider
    {
      Surface GetSurface();
    }

    public interface ParamaterProvider
    {
      IParamaters Paramaters { get; }
    }

    public interface TestProvider
    {
      double[] GetTest();
    }

    public interface JacobianProvider
    {
      Matrix GetJacobian();
    }

    public class PanellingStatus: TestProvider, JacobianProvider,ParamaterProvider
    {
      public Surface TargetSurface;
      public CurveNetworks CurveNetworks = new CurveNetworks();
      public Mold[] MoldDepot { get { return _MoldDepot; } set { _MoldDepot = value; InitParamaters(); } }
      private Mold[] _MoldDepot = new Mold[0];
      public RigidTransformation[] Transformations { get; private set; }
      public Mold[] PanelMoldSelection { get; private set; }

      public PanellingStatus(Surface Target)
      {
        TargetSurface = Target;
        Transformations = new RigidTransformation[0];
        PanelMoldSelection = new Mold[0];

        var para = new ParamatersCombination();
        para.Init(CurveNetworks.Paramaters);
        Paramaters = para;
      }

      public void InitParamaters()
      {
        var result = new List&lt;IParamaters&gt;();
        result.Add(CurveNetworks.Paramaters);
        foreach (var item in MoldDepot)
        {
          result.Add(item.Paramaters);
        }
        foreach(var item in Transformations)
        {
          result.Add(item.Paramaters);
        }

        var para = new ParamatersCombination();
        para.Init(result.ToArray());
        Paramaters = para;

      }

      public Surface GetPanel(int i)
      {
        var surface = PanelMoldSelection[i].GetSurface();
        surface.Transform(Transformations[i].ToTransform());
        return surface;
      }

      public Surface[] GetPanels()
      {
        Surface[] result = new Surface[Transformations.Count()];
        for(int i = 0; i &lt; Transformations.Count(); i++)
        {
          result[i] = GetPanel(i);
        }
        return result;
      }

      public void AddMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        temp.Add(item);
        MoldDepot = temp.ToArray();

        InitParamaters();
      }

      public void RemoveMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        var idx = temp.IndexOf(item);
        temp.RemoveAt(idx);
        MoldDepot = temp.ToArray();

        InitParamaters();
      }

      public void AddPanel(RigidTransformation tr, Mold mold)
      {
        if (!MoldDepot.Contains(mold))
        {
          AddMold(mold);
        }
        var ttr = Transformations.ToList();
        ttr.Add(tr);
        Transformations = ttr.ToArray();

        var tpm = PanelMoldSelection.ToList();
        tpm.Add(mold);
        PanelMoldSelection = tpm.ToArray();

        InitParamaters();
      }

      public IParamaters Paramaters
      {
        get;private set;
      }

      public double[] GetTest()
      {
        var result = new List&lt;double&gt;();
        //result.AddRange(TestSurfaceFitting());
        result.AddRange(TestDivergence());
        result.AddRange(TestCost());
        return result.ToArray();
      }

      public Matrix GetJacobian()
      {
        return GetJacobian(Paramaters);
      }

      public Matrix GetJacobian(IParamaters p)
      {
        var orgtest = GetTest();
        Matrix result = new Matrix(orgtest.Count(), p.Count());
        for(int i = 0; i &lt; p.Count(); i++)
        {
          double dx = 1e-6;
          double val = p.Get(i);
          val += dx;//微分時のdx
          p.Set(i, val);
          var newtest = GetTest();
          val -= dx;
          for(int j = 0; j &lt; orgtest.Count(); j++)
          {
            result[j, i] = (newtest[j] - orgtest[j]) / dx;
          }
        }
        return result;
      }

      public double[] TryOptimization(int count = 1,double Scale=1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        Matrix BestMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());//不要
        //double BestValue = double.MaxValue;
        for (int i = 0; i &lt; count; i++)
        {
          var paraMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());
          var test = GetTest();
          Matrix m = Functions.GaussNewtonMethod(GetJacobian(), Functions.ArrayToMatrix(test), paraMatrix);
          //m.Scale(Scale);
          //Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          TryLengthEstimation(Functions.MatrixToArray(paraMatrix), Functions.MatrixToArray(m));

          var sqsum = Functions.GetSquareSum(test);
          //if (sqsum &lt; BestValue) { BestMatrix = m + paraMatrix; }
          history.Add(sqsum);
        }
        //Paramaters.Init(Functions.MatrixToArray(BestMatrix));

        return history.ToArray();
      }

      public void TryLengthEstimation(double[] org, double[] deg)
      {
        IParamaters[] paras = Paramaters.GetChildParamaters();
        int cnt = 0;

        int searchWidthL = 5;
        int searchWidthN = 3;
        int searchCountN = 5;
        foreach (var item in paras)
        {
          double bestScale = 0;
          double bestValue = double.MaxValue;
          double rangeMax = 1e5;
          double rangeMin = 1e-5;
          double rangeMaxNew = 1e5;
          double rangeMinNew = 1e-5;

          double searchStep = Math.Pow(10, Math.Log10(rangeMax / rangeMin) / searchWidthL);

          for (double val = rangeMin; val &lt; rangeMax; val *= searchStep)
          {
            double scale = val;

            TryLengthEstimationTestScale(item, scale, cnt, org, deg);
            var sqsum = Functions.GetSquareSum(GetTest());
            if (sqsum &lt; bestValue)
            {
              bestValue = sqsum;
              bestScale = scale;
              rangeMaxNew = scale * Math.Sqrt(searchStep);
              rangeMinNew = scale / Math.Sqrt(searchStep);
            }
          }
          rangeMax = rangeMaxNew;
          rangeMin = rangeMinNew;

          for (int i = 0; i &lt; searchCountN; i++) {
            for (int j = 0; j &lt;= searchWidthN; j++)
            {
              double scale = rangeMin + (rangeMax - rangeMin) / searchWidthN * j;

              TryLengthEstimationTestScale(item, scale, cnt, org, deg);
              var sqsum = Functions.GetSquareSum(GetTest());
              if (sqsum &lt; bestValue)
              {
                bestValue = sqsum;
                bestScale = scale;
                rangeMaxNew = scale + (rangeMax - rangeMin) / searchWidthN / 2.0;
                rangeMinNew = scale - (rangeMax - rangeMin) / searchWidthN / 2.0;
              }
            }

            rangeMax = rangeMaxNew;
            rangeMin = rangeMinNew;
          }
          TryLengthEstimationTestScale(item, bestScale, cnt, org, deg);

          cnt += item.Count();
        }
      }

      protected void TryLengthEstimationTestScale(IParamaters item, double Scale, int cnt, double[] org, double[] deg)
      {
        for (int i = 0; i &lt; item.Count(); i++)
        {
          item.Set(i, org[i + cnt] + Scale * deg[i + cnt]);
        }
      }

      public double[] TryOptimizationTransform(int count = 1, double Scale = 1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        for (int i = 0; i &lt; count; i++)
        {
          var test = GetTest();
          for (int j = 0; j &lt; Transformations.Count(); j++)
          {
            var paraMatrix = Functions.ArrayToMatrix(this.Transformations[j].Paramaters.ToArray());
            Matrix m = Functions.GaussNewtonMethod(GetJacobian(Transformations[j].Paramaters), Functions.ArrayToMatrix(test), paraMatrix);
            m.Scale(Scale);
            this.Transformations[j].Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          }
          history.Add(Functions.GetSquareSum(test));
        }
        return history.ToArray();
      }


      public double[] TestSurfaceFitting()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        var controlPoints = CurveNetworks.ControlPoints;
        foreach(var cp in controlPoints)
        {
          result.Add(Functions.GetPointToSurfaceDistance(cp, TargetSurface));
        }
        return result.ToArray();
      }

      public double[] TestCost()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        foreach(var item in this.Transformations)
        {
          result.AddRange(item.Paramaters.ToArray());
        }
        return result.ToArray();
      }

      public double[] TestDivergence(params Surface[] panels) {
        //fix me
        var panellist = panels.Count() == 0 ? GetPanels() : panels;
        var controlPoints = CurveNetworks.ControlPoints;
        double Length1st = double.MaxValue;
        double Length2nd = double.MaxValue;
        List&lt;double&gt; result = new List&lt;double&gt;();

        foreach (var cp in controlPoints)
        {
          foreach(var panel in panellist)
          {
            double dist = Functions.GetPointToSurfaceDistance(cp, panel);
            if (Length1st &gt; dist)
            {
              Length2nd = Length1st;
              Length1st = dist;
            }
            else if(Length2nd &gt; dist){
              Length2nd = dist;
            }
          }
          result.Add(Length1st);
          result.Add(Length2nd);
        }
        return result.ToArray();
      }
    }

    public class CurveNetworks : ParamaterProvider
    {
      public Point3d[] ControlPoints { get
        {
          List&lt;Point3d&gt; result = new List&lt;Point3d&gt;();
          for(int i = 0; i &lt; Paramaters.Count(); i += 3)
          {
            result.Add(new Point3d(Paramaters.Get(i), Paramaters.Get(i + 1), Paramaters.Get(i + 2)));
          }
          return result.ToArray();
        }
      }

      public IParamaters Paramaters
      {
        get; private set;
      }

      public CurveNetworks()
      {
        Paramaters = new Paramaters(0);
      }

      public void AddPoint(params Point3d[] ps)
      {
        var org = Paramaters.ToArray().ToList();
        foreach (var p in ps)
        {
          org.Add(p.X);
          org.Add(p.Y);
          org.Add(p.Z);
        }
        Paramaters.Init(org.ToArray());
      }

      public void AddRandomPointsOnSurface(Surface surface, int count)
      {
        AddPoint(Functions.GetRandomPointsOnSurface(surface, count));
      }

      public void InitControlPoints(Curve[] arg, int Count)
      {
        var result = new List&lt;double&gt;();
        foreach (Curve item in arg)
        {
          for (int i = 0; i &lt; Count; i++) {
            var point = (item.PointAtNormalizedLength(i / (Count - 1)));
            result.Add(point.X);
            result.Add(point.Y);
            result.Add(point.Z);
          }
        }
        Paramaters = new Paramaters(result.Count()); ;
        Paramaters.Init(result.ToArray());
      }
    }

    public interface IParamaters : IEnumerable
    {
      event EventHandler ValueChanged;
      void Init(params double[] arg);
      bool Set(int target, double value);
      double[] ToArray();
      double Get(int target);
      int Count();
      IParamaters[] GetChildParamaters();
    }

    public class ParamatersCombination : IParamaters
    {
      public event EventHandler ValueChanged;
      public IParamaters[] ParamatersMember { get; private set; }

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public double Get(int target)
      {
        int cnt = 0;
        foreach (var item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            return item.Get(target - cnt);
          }
          cnt += item.Count();
        }
        throw new Exception();
      }

      public IEnumerator GetEnumerator()
      {
        foreach (var item in ParamatersMember)
        {
          var itemAr = item.ToArray();
          foreach(var item2 in itemAr)
          {
            yield return item2;
          }
        }
      }

      public void Init(params double[] arg)
      {
        int cnt = 0;
        foreach (var item in this.GetChildParamaters())
        {
          for(int i = 0; i &lt; item.Count(); i++)
          {
            item.Set(i, arg[cnt]);
            cnt++;
          }
        }
        //長すぎる配列分は無視。
      }

      public void Init(params IParamaters[] Ps)
      {
        ParamatersMember = Ps;
      }

      public void AddMember(params Paramaters[] Ps)
      {
        var para = ParamatersMember.ToList();
        para.AddRange(Ps);
        ParamatersMember = para.ToArray();
      }

      public bool Set(int target, double value)
      {
        int cnt = 0;
        foreach (var item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            item.Set(target - cnt, value);
            return true;
          }
          cnt += item.Count();
        }
        return false;
      }

      public double[] ToArray()
      {
        List&lt;double&gt; Result = new List&lt;double&gt;();
        foreach (var item in ParamatersMember)
        {
          Result.AddRange(item.ToArray());
        }
        return Result.ToArray();
      }

      public int Count()
      {
        int result = 0;
        foreach(var item in ParamatersMember)
        {
          result += item.Count();
        }
        return result;
      }

      public IParamaters[] GetChildParamaters()
      {
        List&lt;IParamaters&gt; result = new List&lt;IParamaters&gt;();
        foreach(var item in this.ParamatersMember)
        {
          result.AddRange(item.GetChildParamaters());
        }
        return result.ToArray();
      }
    }

    public class Paramaters : IParamaters
    {
      protected double[] Content;

      public event EventHandler ValueChanged;

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public Paramaters(int Count)
      {
        Content = new double[Count];
      }

      public IEnumerator GetEnumerator()
      {
        foreach(var item in Content)
        {
          yield return item;
        }
      }

      public void Init(params double[] arg)
      {
        Content = arg;
      }

      public bool Set(int target, double value)
      {
        if (Count() &gt; target)
        {
          Content[target] = value;
          return true;
        }
        else
        {
          return false;
        }
      }

      public double[] ToArray()
      {
        return Content;
      }

      public double Get(int target)
      {
        return Content[target];
      }
      public int Count()
      {
        return Content.Count();
      }

      public IParamaters[] GetChildParamaters()
      {
        return new IParamaters[] { this };
      }
    }

    public class Molds
    {
      public abstract class PointSurfaceBase : Mold
      {
        public abstract IParamaters Paramaters { get; }

        public int uCnt = 10, vCnt = 10;
        public Surface GetSurface() {
          return Functions.GetSurfaceFromPoints((u, v) =&gt; { return GetPoint(u, v); }, uCnt, vCnt);
        }
        public abstract Point3d GetPoint(double u, double v);
      }

      public class Plane : Mold
      {
        public IParamaters Paramaters
        {
          get;private set;
        }

        public Plane(double Width, double Height)
        {
          Paramaters = new Paramaters(2);
          Paramaters.Set(0, Width);
          Paramaters.Set(1, Height);
        }

        public Surface GetSurface()
        {
          return new PlaneSurface(Rhino.Geometry.Plane.WorldXY, new Interval(-Paramaters.Get(0) / 2.0, Paramaters.Get(0) / 2.0), new Interval(-Paramaters.Get(1) / 2.0, Paramaters.Get(1) / 2.0));
        }
      }

      public class CubicPolynomial : PointSurfaceBase
      {
        public CubicPolynomial(double width, double height, double a, double b, double c, double d, double e, double f)
        {
          Paramaters.Init(width, height, a, b, c, d, e, f);
        }

        public override IParamaters Paramaters
        {
          get { return _param; }
        }
        private Paramaters _param = new Paramaters(8);

        public override Point3d GetPoint(double u, double v)
        {
          double[] p = Paramaters.ToArray();
          return new Point3d(u * p[0] / 2.0, v * p[1] / 2.0, (p[2] * u * u + p[3] * v * v + p[4] * u * u * u + p[5] * u * u * v + p[6] * u * v * v + p[7] * v * v * v) * (p[0] + p[1]) / 2.0);
        }

        public double[] Get6DParamater(int Count)
        {
          double[] p = Paramaters.ToArray();
          return new double[]
            {
            2 / 3 / Math.Sqrt(5) * p[2],2 / 3 / Math.Sqrt(5) * p[3],(p[5] + p[7]) / Math.Sqrt(15),(p[4] + p[6]) / Math.Sqrt(15),Math.Sqrt(8.0 / 15.0) * p[4],Math.Sqrt(8.0 / 15.0) * p[7]
            };
        }
      }
    }

    public class RigidTransformation : ParamaterProvider
    {
      //x,y,z,rx,ry,rz
      public IParamaters Paramaters
      {
        get;private set;
      }

      public RigidTransformation(double x, double y, double z, double rx, double ry, double rz)
      {
        var pc = new ParamatersCombination();
        pc.Init(new Paramaters(3), new Paramaters(3));
        pc.Init(x, y, z, rx, ry, rz);
        Paramaters = pc;
      }

      public Transform ToTransform()
      {
        double[] p = Paramaters.ToArray();
        return Transform.Multiply(Transform.Translation(p[0], p[1], p[2])
          , Transform.Multiply(Transform.Rotation(Math.Atan(p[5]), Vector3d.ZAxis, Point3d.Origin)
          , Transform.Multiply(Transform.Rotation(Math.Atan(p[4]), Vector3d.YAxis, Point3d.Origin)
          , Transform.Rotation(Math.Atan(p[3]), Vector3d.XAxis, Point3d.Origin))));
      }

    }

    public static class Functions
    {
      public static Surface GetSurfaceFromPoints(Func&lt;double,double,Point3d&gt; func, int uCnt, int vCnt)
      {
        List&lt;Point3d&gt; points = new List&lt;Point3d&gt;();
        for (int i = 0; i &lt; uCnt;i++) {
          for (int j = 0; j &lt; vCnt; j++)
          {
            points.Add(func((double) i / (uCnt - 1) * 2 - 1, (double) j / (vCnt - 1) * 2 - 1));
          }
        }
        return (Surface) NurbsSurface.CreateFromPoints(points.ToArray(), uCnt, vCnt, 3, 3);
      }

      static public double GetPointToSurfaceDistance(Point3d point, Surface surface)
      {
        double u, v;
        surface.ClosestPoint(point, out u, out v);
        return surface.PointAt(u, v).DistanceTo(point);
      }

      static public Matrix ArrayToMatrix(double[] arg)
      {
        var result = new Matrix(arg.Count(), 1);
        for(int i = 0; i &lt; arg.Count(); i++)
        {
          result[i, 0] = arg[i];
        }
        return result;
      }

      static public double[] MatrixToArray(Matrix arg)
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        for (int j = 0; j &lt; arg.RowCount; j++)
        {
          for (int i = 0; i &lt; arg.ColumnCount; i++)
          {
            result.Add(arg[j, i]);
          }
        }
        return result.ToArray();
      }

      static public Point3d[] GetRandomPointsOnSurface(Surface surface, int count) {
        Random rd = new Random();
        var result = new Point3d[count];
        for(int i = 0;i &lt; count; i++)
        {
          var dom1 = surface.Domain(0);
          var dom2 = surface.Domain(1);
          result[i] = surface.PointAt(dom1.Min + dom1.Length * rd.NextDouble(), dom2.Min + dom2.Length * rd.NextDouble());

        }
        return result;
      }

      static public double GetSquareSum(double[] arg)
      {
        double result = 0;
        foreach(var item in arg) { result += item;  }
        return result;
      }

      static public Polyline GetSimpleGraph(double[] d)
      {
        double maxValue = double.MinValue;
        double minValue = double.MaxValue;
        foreach(var item in d)
        {
          maxValue = Math.Max(maxValue, item);
          minValue = Math.Min(minValue, item);
        }
        double lenValue = maxValue - minValue;
        var pl = new Polyline(d.Count());
        for (int i = 0; i &lt; d.Count(); i++)
        {
          //pl.Add(new Point3d((double)i / (d.Count() - 1.0), (d[i] - minValue) / lenValue, 0));
          pl.Add(new Point3d((double) i / (d.Count() - 1.0), d[i] / maxValue, 0));
        }

        return pl;
      }

      static public Matrix GaussNewtonMethod(Matrix Jacobian, Matrix EnergyVector, Matrix StatusVector, double ZeroTolerance = 1e-10)
      {
        Matrix M1 = Jacobian.Duplicate();
        M1.Transpose();
        Matrix M2 = M1 * Jacobian;
        M2.Invert(ZeroTolerance);
        M1 = M1 * EnergyVector;
        M1 = M2 * M1;
        M1.Scale(-1);
        return M1;
      }
    }
  }
</item>
                    <item name="Description" type_name="gh_string" type_code="10">A C#.NET scriptable component</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">1516bd78-5b4f-4168-a8ac-051962c566b6</item>
                    <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">C#</item>
                    <item name="OutParameter" type_name="gh_bool" type_code="1">true</item>
                    <item name="ReferenceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ScriptSource" type_name="gh_string" type_code="10">    try{
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Panelling.Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) * 2.0 + Math.Cos(v) * (-2.0)), 15, 15);
      var status = new Panelling.PanellingStatus(target);
      Panelling.Mold mold1, mold2;
      status.AddMold(mold1 = new Panelling.Molds.Plane(15, 15));
      status.AddMold(mold2 = new Panelling.Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new Panelling.RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new Panelling.RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);

      //      target.SetDomain(0, new Interval(0, 1));
      //      target.SetDomain(1, new Interval(0, 1));
      //      for(int i = 0;i &lt; 20;i++){
      //        status.CurveNetworks.AddPoint(target.PointAt(0.5, (double) i / 20));
      //        status.CurveNetworks.AddPoint(target.PointAt((double) i / 20, 0.5));
      //      }
      //
      status.CurveNetworks.AddRandomPointsOnSurface(target, 60);
      //status.TryOptimizationTransform(100, 1.0);
      var dat = status.TryOptimization(100);
      A = status.GetPanels();
      B = target;
      C = status.CurveNetworks.ControlPoints;
      D = Panelling.Functions.GetSimpleGraph(dat);
    }catch(Exception e){
      Print(e.StackTrace);
      Print(e.Message);
    }
</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>63</X>
                          <Y>106</Y>
                          <W>75</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>93</X>
                          <Y>158</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="9">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="7">
                        <chunk name="InputParam" index="0">
                          <items count="9">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable x</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">62f77ee5-4b35-461e-8073-4e1c795f25d5</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>65</X>
                                  <Y>108</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>73</X>
                                  <Y>133</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="9">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable y</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">88dfc31b-c6cc-4f4a-9fee-5e0309a9a7a3</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>65</X>
                                  <Y>158</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>73</X>
                                  <Y>183</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Print, Reflect and Error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e1cfe5b9-e187-4fda-b070-3212fba7b590</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>108</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>118</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter A</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5e90e27c-e3ab-4a47-bd49-1acead6dda91</item>
                            <item name="Name" type_name="gh_string" type_code="10">A</item>
                            <item name="NickName" type_name="gh_string" type_code="10">A</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>128</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>138</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter B</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a4997db7-c1fc-4397-80a6-5d35ab4c95e2</item>
                            <item name="Name" type_name="gh_string" type_code="10">B</item>
                            <item name="NickName" type_name="gh_string" type_code="10">B</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>148</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>158</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter C</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">30c58457-981f-4b49-b5b0-c7c701578e39</item>
                            <item name="Name" type_name="gh_string" type_code="10">C</item>
                            <item name="NickName" type_name="gh_string" type_code="10">C</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>168</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>178</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter D</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3e0556f0-9ada-4472-a5c0-696684adefb1</item>
                            <item name="Name" type_name="gh_string" type_code="10">D</item>
                            <item name="NickName" type_name="gh_string" type_code="10">D</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>188</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>198</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">789db356-f5d3-4975-b5cd-95917298a164</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">e1cfe5b9-e187-4fda-b070-3212fba7b590</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="4">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>299</X>
                          <Y>86</Y>
                          <W>600</W>
                          <H>490</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">deaf8653-5528-4286-807c-3de8b8dad781</item>
                <item name="Name" type_name="gh_string" type_code="10">Surface</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic surfaces</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">4e67ac8b-c045-4aee-9473-2ce874d449fb</item>
                    <item name="Name" type_name="gh_string" type_code="10">Surface</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Srf</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">a4997db7-c1fc-4397-80a6-5d35ab4c95e2</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>152</X>
                          <Y>348</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>177.6</X>
                          <Y>358.4</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">deaf8653-5528-4286-807c-3de8b8dad781</item>
                <item name="Name" type_name="gh_string" type_code="10">Surface</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic surfaces</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">5dd343b5-1760-4dcf-9c30-0e36e5b648bd</item>
                    <item name="Name" type_name="gh_string" type_code="10">Surface</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Srf</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">5e90e27c-e3ab-4a47-bd49-1acead6dda91</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>181</X>
                          <Y>301</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>206.4</X>
                          <Y>311.2</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">fbac3e32-f100-4292-8692-77240a42fd1a</item>
                <item name="Name" type_name="gh_string" type_code="10">Point</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of three-dimensional points</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cbda1666-c8ae-4c37-815f-a18fc719093f</item>
                    <item name="Name" type_name="gh_string" type_code="10">Point</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pt</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">30c58457-981f-4b49-b5b0-c7c701578e39</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>213</X>
                          <Y>264</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>238.4462</X>
                          <Y>274.3076</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">d5967b9f-e8ee-436b-a8ad-29fdcecf32d5</item>
                <item name="Name" type_name="gh_string" type_code="10">Curve</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic curves</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">96e5fe4e-fedc-4fd0-b18c-31ad760c77ef</item>
                    <item name="Name" type_name="gh_string" type_code="10">Curve</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Crv</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">3e0556f0-9ada-4472-a5c0-696684adefb1</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>128</X>
                          <Y>485</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>153.75</X>
                          <Y>495</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="6">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">a9a8ebd2-fff5-4c44-a8f5-739736d129ba</item>
                <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="AdditionalSource" type_name="gh_string" type_code="10">  public class Panelling
  {
    public static object Test() {
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) + Math.Cos(v)), 15, 15);
      var status = new PanellingStatus(target);
      Mold mold1, mold2;
      status.AddMold(mold1 = new Molds.Plane(15, 15));
      status.AddMold(mold2 = new Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);
      status.CurveNetworks.AddRandomPointsOnSurface(target, 10);
      status.TryOptimizationTransform(10, 3.0);
      status.TryOptimization(10, 0.3);
      return status.GetPanels();
    }

    public interface Mold : ParamaterProvider
    {
      Surface GetSurface();
    }

    public interface ParamaterProvider
    {
      IParamaters Paramaters { get; }
    }

    public interface TestProvider
    {
      double[] GetTest();
    }

    public interface JacobianProvider
    {
      Matrix GetJacobian();
    }

    public class PanellingStatus: TestProvider, JacobianProvider,ParamaterProvider
    {
      public Surface TargetSurface;
      public CurveNetworks CurveNetworks = new CurveNetworks();
      public Mold[] MoldDepot { get { return _MoldDepot; } set { _MoldDepot = value; InitParamaters(); } }
      private Mold[] _MoldDepot = new Mold[0];
      public RigidTransformation[] Transformations { get; private set; }
      public Mold[] PanelMoldSelection { get; private set; }

      public PanellingStatus(Surface Target)
      {
        TargetSurface = Target;
        Transformations = new RigidTransformation[0];
        PanelMoldSelection = new Mold[0];

        var para = new ParamatersCombination();
        para.Init(CurveNetworks.Paramaters);
        Paramaters = para;
      }

      public void InitParamaters()
      {
        var result = new List&lt;IParamaters&gt;();
        result.Add(CurveNetworks.Paramaters);
        foreach (var item in MoldDepot)
        {
          result.Add(item.Paramaters);
        }
        foreach(var item in Transformations)
        {
          result.Add(item.Paramaters);
        }

        var para = new ParamatersCombination();
        para.Init(result.ToArray());
        Paramaters = para;

      }

      public Surface GetPanel(int i)
      {
        var surface = PanelMoldSelection[i].GetSurface();
        surface.Transform(Transformations[i].ToTransform());
        return surface;
      }

      public Surface[] GetPanels()
      {
        Surface[] result = new Surface[Transformations.Count()];
        for(int i = 0; i &lt; Transformations.Count(); i++)
        {
          result[i] = GetPanel(i);
        }
        return result;
      }

      public void AddMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        temp.Add(item);
        MoldDepot = temp.ToArray();
      }

      public void RemoveMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        var idx = temp.IndexOf(item);
        temp.RemoveAt(idx);
        MoldDepot = temp.ToArray();
      }

      public void AddPanel(RigidTransformation tr, Mold mold)
      {
        if (!MoldDepot.Contains(mold))
        {
          AddMold(mold);
        }
        var ttr = Transformations.ToList();
        ttr.Add(tr);
        Transformations = ttr.ToArray();

        var tpm = PanelMoldSelection.ToList();
        tpm.Add(mold);
        PanelMoldSelection = tpm.ToArray();
      }

      public IParamaters Paramaters
      {
        get;private set;
      }

      public double[] GetTest()
      {
        var result = new List&lt;double&gt;();
        result.AddRange(TestSurfaceFitting());
        result.AddRange(TestDivergence());
        return result.ToArray();
      }

      public Matrix GetJacobian()
      {
        return GetJacobian(Paramaters);
      }

      public Matrix GetJacobian(IParamaters p)
      {
        var orgtest = GetTest();
        Matrix result = new Matrix(orgtest.Count(), p.Count());
        for(int i = 0; i &lt; p.Count(); i++)
        {
          double dx = 1e-6;
          double val = p.Get(i);
          val += dx;//微分時のdx
          p.Set(i, val);
          var newtest = GetTest();
          val -= dx;
          for(int j = 0; j &lt; orgtest.Count(); j++)
          {
            result[j, i] = (newtest[j] - orgtest[j]) / dx;
          }
        }
        return result;
      }

      public double[] TryOptimization(int count = 1,double Scale=1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        Matrix BestMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());//不要
        double BestValue = double.MaxValue;
        for (int i = 0; i &lt; count; i++)
        {
          var paraMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());
          var test = GetTest();
          Matrix m = Functions.GaussNewtonMethod(GetJacobian(), Functions.ArrayToMatrix(test), paraMatrix);
          m.Scale(Scale);
          Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));

          var sqsum = Functions.GetSquareSum(test);
          if (sqsum &lt; BestValue) { BestMatrix = paraMatrix; }
          string sr = "";
          foreach(var d in test){
            sr += d + " ";
          }
          MessageBox.Show(sr);
          history.Add(sqsum);
        }
        Paramaters.Init(Functions.MatrixToArray(BestMatrix));

        return history.ToArray();

      }


      public double[] TryOptimizationTransform(int count = 1, double Scale = 1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();
        for (int i = 0; i &lt; count; i++)
        {
          var test = GetTest();
          for (int j = 0; j &lt; Transformations.Count(); j++)
          {
            var paraMatrix = Functions.ArrayToMatrix(this.Transformations[j].Paramaters.ToArray());
            Matrix m = Functions.GaussNewtonMethod(GetJacobian(Transformations[j].Paramaters), Functions.ArrayToMatrix(test), paraMatrix);
            m.Scale(Scale);
            this.Transformations[j].Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          }
          history.Add(Functions.GetSquareSum(test));
        }
        return history.ToArray();
      }


      public double[] TestSurfaceFitting()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        var controlPoints = CurveNetworks.ControlPoints;
        foreach(var cp in controlPoints)
        {
          result.Add(Functions.GetPointToSurfaceDistance(cp, TargetSurface));
        }
        return result.ToArray();
      }

      public double[] TestDivergence(params Surface[] panels) {
        //fix me
        var panellist = panels.Count() == 0 ? GetPanels() : panels;
        var controlPoints = CurveNetworks.ControlPoints;
        double Length1st = double.MaxValue;
        double Length2nd = double.MaxValue;
        List&lt;double&gt; result = new List&lt;double&gt;();

        foreach (var cp in controlPoints)
        {
          foreach(var panel in panellist)
          {
            double dist = Functions.GetPointToSurfaceDistance(cp, panel);
            if (Length1st &gt; dist)
            {
              Length2nd = Length1st;
              Length1st = dist;
            }
          }
          result.Add(Length1st);
          result.Add(Length2nd);
        }
        return result.ToArray();
      }
    }

    public class CurveNetworks : ParamaterProvider
    {
      public Point3d[] ControlPoints { get
        {
          List&lt;Point3d&gt; result = new List&lt;Point3d&gt;();
          for(int i = 0; i &lt; Paramaters.Count(); i += 3)
          {
            result.Add(new Point3d(Paramaters.Get(i), Paramaters.Get(i + 1), Paramaters.Get(i + 2)));
          }
          return result.ToArray();
        }
      }

      public IParamaters Paramaters
      {
        get; private set;
      }

      public CurveNetworks()
      {
        Paramaters = new Paramaters(0);
      }

      public void AddPoint(params Point3d[] ps)
      {
        var org = Paramaters.ToArray().ToList();
        foreach (var p in ps)
        {
          org.Add(p.X);
          org.Add(p.Y);
          org.Add(p.Z);
        }
        Paramaters.Init(org.ToArray());
      }

      public void AddRandomPointsOnSurface(Surface surface, int count)
      {
        AddPoint(Functions.GetRandomPointsOnSurface(surface, count));
      }

      public void InitControlPoints(Curve[] arg, int Count)
      {
        var result = new List&lt;double&gt;();
        foreach (Curve item in arg)
        {
          for (int i = 0; i &lt; Count; i++) {
            var point = (item.PointAtNormalizedLength(i / (Count - 1)));
            result.Add(point.X);
            result.Add(point.Y);
            result.Add(point.Z);
          }
        }
        Paramaters = new Paramaters(result.Count()); ;
        Paramaters.Init(result.ToArray());
      }
    }

    public interface IParamaters : IEnumerable
    {
      event EventHandler ValueChanged;
      void Init(params double[] arg);
      bool Set(int target, double value);
      double[] ToArray();
      double Get(int target);
      int Count();
    }

    public class ParamatersCombination : IParamaters
    {
      public event EventHandler ValueChanged;
      public IParamaters[] ParamatersMember { get; private set; }

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public double Get(int target)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            return item.Get(target - cnt);
          }
          cnt += item.Count();
        }
        throw new Exception();
      }

      public IEnumerator GetEnumerator()
      {
        foreach (Paramaters item in ParamatersMember)
        {
          var itemArray = item.ToArray();
          foreach(var item2 in itemArray)
          {
            yield return item2;
          }
        }
      }

      public void Init(params double[] arg)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          for(int i = 0; i &lt; item.Count(); i++)
          {
            item.Set(i, arg[cnt]);
            cnt++;
          }
        }
        //長すぎる配列分は無視。
      }

      public void Init(params IParamaters[] Ps)
      {
        ParamatersMember = Ps;
      }

      public void AddMember(params Paramaters[] Ps)
      {
        var para = ParamatersMember.ToList();
        para.AddRange(Ps);
        ParamatersMember = para.ToArray();
      }

      public bool Set(int target, double value)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            item.Set(target - cnt, value);
            return true;
          }
          cnt += item.Count();
        }
        return false;
      }

      public double[] ToArray()
      {
        List&lt;double&gt; Result = new List&lt;double&gt;();
        foreach (Paramaters item in ParamatersMember)
        {
          Result.AddRange(item.ToArray());
        }
        return Result.ToArray();
      }

      public int Count()
      {
        int result = 0;
        foreach(var item in ParamatersMember)
        {
          result += item.Count();
        }
        return result;
      }
    }

    public class Paramaters : IParamaters
    {
      protected double[] Content;

      public event EventHandler ValueChanged;

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public Paramaters(int Count)
      {
        Content = new double[Count];
      }

      public IEnumerator GetEnumerator()
      {
        foreach(var item in Content)
        {
          yield return item;
        }
      }

      public void Init(params double[] arg)
      {
        Content = arg;
      }

      public bool Set(int target, double value)
      {
        if (Count() &gt; target)
        {
          Content[target] = value;
          return true;
        }
        else
        {
          return false;
        }
      }

      public double[] ToArray()
      {
        return Content;
      }

      public double Get(int target)
      {
        return Content[target];
      }
      public int Count()
      {
        return Content.Count();
      }
    }

    public class Molds
    {
      public abstract class PointSurfaceBase : Mold
      {
        public abstract IParamaters Paramaters { get; }

        public int uCnt = 10, vCnt = 10;
        public Surface GetSurface() {
          return Functions.GetSurfaceFromPoints((u, v) =&gt; { return GetPoint(u, v); }, uCnt, vCnt);
        }
        public abstract Point3d GetPoint(double u, double v);
      }

      public class Plane : Mold
      {
        public IParamaters Paramaters
        {
          get;private set;
        }

        public Plane(double Width, double Height)
        {
          Paramaters = new Paramaters(2);
          Paramaters.Set(0, Width);
          Paramaters.Set(1, Height);
        }

        public Surface GetSurface()
        {
          return new PlaneSurface(Rhino.Geometry.Plane.WorldXY, new Interval(-Paramaters.Get(0) / 2.0, Paramaters.Get(0) / 2.0), new Interval(-Paramaters.Get(1) / 2.0, Paramaters.Get(1) / 2.0));
        }
      }

      public class CubicPolynomial : PointSurfaceBase
      {
        public CubicPolynomial(double width, double height, double a, double b, double c, double d, double e, double f)
        {
          Paramaters.Init(width, height, a, b, c, d, e, f);
        }

        public override IParamaters Paramaters
        {
          get { return _param; }
        }
        private Paramaters _param = new Paramaters(8);

        public override Point3d GetPoint(double u, double v)
        {
          double[] p = Paramaters.ToArray();
          return new Point3d(u * p[0] / 2.0, v * p[1] / 2.0, (p[2] * u * u + p[3] * v * v + p[4] * u * u * u + p[5] * u * u * v + p[6] * u * v * v + p[7] * v * v * v) * (p[0] + p[1]) / 2.0);
        }

        public double[] Get6DParamater(int Count)
        {
          double[] p = Paramaters.ToArray();
          return new double[]
            {
            2 / 3 / Math.Sqrt(5) * p[2],2 / 3 / Math.Sqrt(5) * p[3],(p[5] + p[7]) / Math.Sqrt(15),(p[4] + p[6]) / Math.Sqrt(15),Math.Sqrt(8.0 / 15.0) * p[4],Math.Sqrt(8.0 / 15.0) * p[7]
            };
        }
      }
    }

    public class RigidTransformation : ParamaterProvider
    {
      //x,y,z,rx,ry,rz
      public IParamaters Paramaters
      {
        get;private set;
      }

      public RigidTransformation(double x, double y, double z, double rx, double ry, double rz)
      {
        Paramaters = new Paramaters(6);
        Paramaters.Init(x, y, z, rx, ry, rz);
      }

      public Transform ToTransform()
      {
        double[] p = Paramaters.ToArray();
        return Transform.Multiply(Transform.Translation(p[0], p[1], p[2])
          , Transform.Multiply(Transform.Rotation(Math.Asin(p[5] % 1), Vector3d.ZAxis, Point3d.Origin)
          , Transform.Multiply(Transform.Rotation(Math.Asin(p[4] % 1), Vector3d.YAxis, Point3d.Origin)
          , Transform.Rotation(Math.Asin(p[3] % 1), Vector3d.XAxis, Point3d.Origin))));
      }

    }

    public static class Functions
    {
      public static Surface GetSurfaceFromPoints(Func&lt;double,double,Point3d&gt; func, int uCnt, int vCnt)
      {
        List&lt;Point3d&gt; points = new List&lt;Point3d&gt;();
        for (int i = 0; i &lt; uCnt;i++) {
          for (int j = 0; j &lt; vCnt; j++)
          {
            points.Add(func((double) i / (uCnt - 1) * 2 - 1, (double) j / (vCnt - 1) * 2 - 1));
          }
        }
        return (Surface) NurbsSurface.CreateFromPoints(points.ToArray(), uCnt, vCnt, 3, 3);
      }

      static public double GetPointToSurfaceDistance(Point3d point, Surface surface)
      {
        double u, v;
        surface.ClosestPoint(point, out u, out v);
        return surface.PointAt(u, v).DistanceTo(point);
      }

      static public Matrix ArrayToMatrix(double[] arg)
      {
        var result = new Matrix(arg.Count(), 1);
        for(int i = 0; i &lt; arg.Count(); i++)
        {
          result[i, 0] = arg[i];
        }
        return result;
      }

      static public double[] MatrixToArray(Matrix arg)
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        for (int j = 0; j &lt; arg.RowCount; j++)
        {
          for (int i = 0; i &lt; arg.ColumnCount; i++)
          {
            result.Add(arg[j, i]);
          }
        }
        return result.ToArray();
      }

      static public Point3d[] GetRandomPointsOnSurface(Surface surface, int count) {
        Random rd = new Random();
        var result = new Point3d[count];
        for(int i = 0;i &lt; count; i++)
        {
          var dom1 = surface.Domain(0);
          var dom2 = surface.Domain(1);
          result[i] = surface.PointAt(dom1.Min + dom1.Length * rd.NextDouble(), dom2.Min + dom2.Length * rd.NextDouble());

        }
        return result;
      }

      static public double GetSquareSum(double[] arg)
      {
        double result = 0;
        foreach(var item in arg) { result += item;  }
        return result;
      }

      static public Polyline GetSimpleGraph(double[] d)
      {
        double maxValue = double.MinValue;
        double minValue = double.MaxValue;
        foreach(var item in d)
        {
          maxValue = Math.Max(maxValue, item);
          minValue = Math.Min(minValue, item);
        }
        double lenValue = maxValue - minValue;
        var pl = new Polyline(d.Count());
        for (int i = 0; i &lt; d.Count(); i++)
        {
          pl.Add(new Point3d((double) i / (d.Count() - 1.0), (d[i] - minValue) / lenValue, 0));
        }

        return pl;
      }

      static public Matrix GaussNewtonMethod(Matrix Jacobian, Matrix EnergyVector, Matrix StatusVector, double ZeroTolerance = 1e-10)
      {
        Matrix M1 = Jacobian.Duplicate();
        M1.Transpose();
        Matrix M2 = M1 * Jacobian;
        M2.Invert(ZeroTolerance);
        M1 = M1 * EnergyVector;
        M1 = M2 * M1;
        M1.Scale(-1);
        return M1;
      }
    }
  }
</item>
                    <item name="Description" type_name="gh_string" type_code="10">A C#.NET scriptable component</item>
                    <item name="EditorPosition" type_name="gh_drawing_point" type_code="30">
                      <X>30</X>
                      <Y>285</Y>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6d609164-0bfd-44f0-9144-81ce1435ad9b</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">C#</item>
                    <item name="OutParameter" type_name="gh_bool" type_code="1">true</item>
                    <item name="ReferenceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ScriptSource" type_name="gh_string" type_code="10">    try{
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Panelling.Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) * 2.0 + Math.Cos(v) * (-2.0)), 15, 15);
      var status = new Panelling.PanellingStatus(target);
      Panelling.Mold mold1, mold2;
      status.AddMold(mold1 = new Panelling.Molds.Plane(15, 15));
      status.AddMold(mold2 = new Panelling.Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new Panelling.RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new Panelling.RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);

      target.SetDomain(0, new Interval(0, 1));
      target.SetDomain(1, new Interval(0, 1));
      for(int i = 0;i &lt; 20;i++){
        status.CurveNetworks.AddPoint(target.PointAt(0.5, (double) i / 20));
        status.CurveNetworks.AddPoint(target.PointAt((double) i / 20, 0.5));
      }
      //      status.CurveNetworks.AddRandomPointsOnSurface(target, 30);
      //status.TryOptimizationTransform(100, 1.0);
      var dat = status.TryOptimization(10, 0.3);
      A = status.GetPanels();
      B = target;
      C = status.CurveNetworks.ControlPoints;
      D = Panelling.Functions.GetSimpleGraph(dat);
    }catch(Exception e){
      Print(e.StackTrace);
      Print(e.Message);
    }
</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>55</X>
                          <Y>-33</Y>
                          <W>75</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>85</X>
                          <Y>19</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="9">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="7">
                        <chunk name="InputParam" index="0">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable x</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b92bd730-ea37-40e4-9124-31cb61a2d672</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>57</X>
                                  <Y>-31</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>65</X>
                                  <Y>-6</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable y</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">727f1918-c796-4476-b7a3-ea066ee3e7f3</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>57</X>
                                  <Y>19</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>65</X>
                                  <Y>44</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="8">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Print, Reflect and Error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">21fb7092-dc84-41ba-a0ea-bd4eb5f377e4</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>-31</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>-21</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter A</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0b02c468-9f91-4cd5-b2af-88988c860266</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">A</item>
                            <item name="NickName" type_name="gh_string" type_code="10">A</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>-11</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>-1</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter B</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4848ad6e-767c-4217-92ed-6a7709a833f8</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">B</item>
                            <item name="NickName" type_name="gh_string" type_code="10">B</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>9</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>19</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter C</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6ad7107f-66c0-4a3e-a211-9919ed3e0406</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">C</item>
                            <item name="NickName" type_name="gh_string" type_code="10">C</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>29</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>39</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter D</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">23b26acb-0325-4172-b193-b435fbf404fd</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">D</item>
                            <item name="NickName" type_name="gh_string" type_code="10">D</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>49</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>59</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="5396">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</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>