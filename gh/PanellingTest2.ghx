<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">c65703e5-9086-4587-95a6-2a7bd0025a29</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">635839233702712384</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">PanellingTest2.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>14</X>
                  <Y>85</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1.25</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">7</item>
          </items>
          <chunks count="7">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">a9a8ebd2-fff5-4c44-a8f5-739736d129ba</item>
                <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="AdditionalSource" type_name="gh_string" type_code="10">  public class Panelling
  {
    public static object Test() {
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) + Math.Cos(v)), 15, 15);
      var status = new PanellingStatus(target);
      Mold mold1, mold2;
      status.AddMold(mold1 = new Molds.Plane(15, 15));
      status.AddMold(mold2 = new Molds.CubicPolynomial(15, 15, 0, 0, 0, 0, 0, 0));
      status.AddPanel(new RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);
      status.CurveNetworks.AddRandomPointsOnSurface(target, 10);
      status.TryOptimizationTransform(1);
      return status.GetPanels();
    }

    public interface Mold : ParamaterProvider
    {
      Surface GetSurface();
    }

    public interface ParamaterProvider
    {
      IParamaters Paramaters { get; }
    }

    public interface TestProvider
    {
      double[] GetTest();
    }

    public interface JacobianProvider
    {
      Matrix GetJacobian();
    }

    public class PanellingStatus: TestProvider, JacobianProvider,ParamaterProvider
    {
      public Surface TargetSurface;
      public CurveNetworks CurveNetworks = new CurveNetworks();
      public Mold[] MoldDepot { get { return _MoldDepot; } set { _MoldDepot = value; InitParamaters(); } }
      private Mold[] _MoldDepot = new Mold[0];
      public RigidTransformation[] Transformations { get; private set; }
      public Mold[] PanelMoldSelection { get; private set; }

      public PanellingStatus(Surface Target)
      {
        TargetSurface = Target;
        Transformations = new RigidTransformation[0];
        PanelMoldSelection = new Mold[0];

        var para = new ParamatersCombination();
        para.Init(CurveNetworks.Paramaters);
        Paramaters = para;
      }

      public void InitParamaters()
      {
        var result = new List&lt;IParamaters&gt;();
        result.Add(CurveNetworks.Paramaters);
        foreach (var item in MoldDepot)
        {
          result.Add(item.Paramaters);
        }
        foreach(var item in Transformations)
        {
          result.Add(item.Paramaters);
        }

        var para = new ParamatersCombination();
        para.Init(result.ToArray());
        Paramaters = para;

      }

      public Surface GetPanel(int i)
      {
        var surface = PanelMoldSelection[i].GetSurface();
        surface.Transform(Transformations[i].ToTransform());
        return surface;
      }

      public Surface[] GetPanels()
      {
        Surface[] result = new Surface[Transformations.Count()];
        for(int i = 0; i &lt; Transformations.Count(); i++)
        {
          result[i] = GetPanel(i);
        }
        return result;
      }

      public void AddMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        temp.Add(item);
        MoldDepot = temp.ToArray();

        InitParamaters();
      }

      public void RemoveMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        var idx = temp.IndexOf(item);
        temp.RemoveAt(idx);
        MoldDepot = temp.ToArray();

        InitParamaters();
      }

      public void AddPanel(RigidTransformation tr, Mold mold)
      {
        if (!MoldDepot.Contains(mold))
        {
          AddMold(mold);
        }
        var ttr = Transformations.ToList();
        ttr.Add(tr);
        Transformations = ttr.ToArray();

        var tpm = PanelMoldSelection.ToList();
        tpm.Add(mold);
        PanelMoldSelection = tpm.ToArray();

        InitParamaters();
      }

      public IParamaters Paramaters
      {
        get;private set;
      }

      public double[] GetTest()
      {
        var result = new List&lt;double&gt;();
        //result.AddRange(TestSurfaceFitting());
        result.AddRange(TestDivergence());
        return result.ToArray();
      }

      public Matrix GetJacobian()
      {
        return GetJacobian(Paramaters);
      }

      public Matrix GetJacobian(IParamaters p)
      {
        var orgtest = GetTest();
        Matrix result = new Matrix(orgtest.Count(), p.Count());
        for(int i = 0; i &lt; p.Count(); i++)
        {
          double dx = 1e-6;
          double val = p.Get(i);
          val += dx;//微分時のdx
          p.Set(i, val);
          var newtest = GetTest();
          val -= dx;
          for(int j = 0; j &lt; orgtest.Count(); j++)
          {
            result[j, i] = (newtest[j] - orgtest[j]) / dx;
          }
        }
        return result;
      }

      public double[] TryOptimization(int count = 1,double Scale=1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        Matrix BestMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());//不要
        //double BestValue = double.MaxValue;
        for (int i = 0; i &lt; count; i++)
        {
          var paraMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());
          var test = GetTest();
          Matrix m = Functions.GaussNewtonMethod(GetJacobian(), Functions.ArrayToMatrix(test), paraMatrix);
          //m.Scale(Scale);
          //Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          TryLengthEstimation(Functions.MatrixToArray(paraMatrix), Functions.MatrixToArray(m));

          var sqsum = Functions.GetSquareSum(test);
          //if (sqsum &lt; BestValue) { BestMatrix = m + paraMatrix; }
          history.Add(sqsum);
        }
        //Paramaters.Init(Functions.MatrixToArray(BestMatrix));

        return history.ToArray();
      }

      public void TryLengthEstimation(double[] org, double[] deg)
      {
        IParamaters[] paras = Paramaters.GetChildParamaters();
        int cnt = 0;

        int searchWidthL = 5;
        int searchWidthN = 3;
        int searchCountN = 5;
        foreach (var item in paras)
        {
          double bestScale = 0;
          double bestValue = double.MaxValue;
          double rangeMax = 1e5;
          double rangeMin = 1e-5;
          double rangeMaxNew = 1e5;
          double rangeMinNew = 1e-5;

          double searchStep = Math.Pow(10, Math.Log10(rangeMax / rangeMin) / searchWidthL);

          for (double val = rangeMin; val &lt; rangeMax; val *= searchStep)
          {
            double scale = val;

            TryLengthEstimationTestScale(item, scale, cnt, org, deg);
            var sqsum = Functions.GetSquareSum(GetTest());
            if (sqsum &lt; bestValue)
            {
              bestValue = sqsum;
              bestScale = scale;
              rangeMaxNew = scale * Math.Sqrt(searchStep);
              rangeMinNew = scale / Math.Sqrt(searchStep);
            }
          }
          rangeMax = rangeMaxNew;
          rangeMin = rangeMinNew;

          for (int i = 0; i &lt; searchCountN; i++) {
            for (int j = 0; j &lt;= searchWidthN; j++)
            {
              double scale = rangeMin + (rangeMax - rangeMin) / searchWidthN * j;

              TryLengthEstimationTestScale(item, scale, cnt, org, deg);
              var sqsum = Functions.GetSquareSum(GetTest());
              if (sqsum &lt; bestValue)
              {
                bestValue = sqsum;
                bestScale = scale;
                rangeMaxNew = scale + (rangeMax - rangeMin) / searchWidthN / 2.0;
                rangeMinNew = scale - (rangeMax - rangeMin) / searchWidthN / 2.0;
              }
            }
                        
            rangeMax = rangeMaxNew;
            rangeMin = rangeMinNew;
          }
          TryLengthEstimationTestScale(item, bestScale, cnt, org, deg);

          cnt += item.Count();
        }
      }

      protected void TryLengthEstimationTestScale(IParamaters item, double Scale, int cnt, double[] org, double[] deg)
      {
        for (int i = 0; i &lt; item.Count(); i++)
        {
          item.Set(i, org[i + cnt] + Scale * deg[i + cnt]);
        }
      }

      public double[] TryOptimizationTransform(int count = 1, double Scale = 1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        for (int i = 0; i &lt; count; i++)
        {
          var test = GetTest();
          for (int j = 0; j &lt; Transformations.Count(); j++)
          {
            var paraMatrix = Functions.ArrayToMatrix(this.Transformations[j].Paramaters.ToArray());
            Matrix m = Functions.GaussNewtonMethod(GetJacobian(Transformations[j].Paramaters), Functions.ArrayToMatrix(test), paraMatrix);
            m.Scale(Scale);
            this.Transformations[j].Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          }
          history.Add(Functions.GetSquareSum(test));
        }
        return history.ToArray();
      }


      public double[] TestSurfaceFitting()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        var controlPoints = CurveNetworks.ControlPoints;
        foreach(var cp in controlPoints)
        {
          result.Add(Functions.GetPointToSurfaceDistance(cp, TargetSurface));
        }
        return result.ToArray();
      }

      public double[] TestCost()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        foreach(var item in this.Transformations)
        {
          result.AddRange(item.Paramaters.ToArray());
        }
        return result.ToArray();
      }

      public double[] TestDivergence(params Surface[] panels) {
        //fix me
        var panellist = panels.Count() == 0 ? GetPanels() : panels;
        var controlPoints = CurveNetworks.ControlPoints;
        double Length1st = double.MaxValue;
        double Length2nd = double.MaxValue;
        List&lt;double&gt; result = new List&lt;double&gt;();

        foreach (var cp in controlPoints)
        {
          foreach(var panel in panellist)
          {
            double dist = Functions.GetPointToSurfaceDistance(cp, panel);
            if (Length1st &gt; dist)
            {
              Length2nd = Length1st;
              Length1st = dist;
            }
            else if(Length2nd &gt; dist){
              Length2nd = dist;
            }
          }
          result.Add(Length1st);
          result.Add(Length2nd);
        }
        return result.ToArray();
      }
    }

    public class CurveNetworks : ParamaterProvider
    {
      public Point3d[] ControlPoints { get
        {
          List&lt;Point3d&gt; result = new List&lt;Point3d&gt;();
          for(int i = 0; i &lt; Paramaters.Count(); i += 3)
          {
            result.Add(new Point3d(Paramaters.Get(i), Paramaters.Get(i + 1), Paramaters.Get(i + 2)));
          }
          return result.ToArray();
        }
      }

      public IParamaters Paramaters
      {
        get; private set;
      }

      public CurveNetworks()
      {
        Paramaters = new Paramaters(0);
      }

      public void AddPoint(params Point3d[] ps)
      {
        var org = Paramaters.ToArray().ToList();
        foreach (var p in ps)
        {
          org.Add(p.X);
          org.Add(p.Y);
          org.Add(p.Z);
        }
        Paramaters.Init(org.ToArray());
      }

      public void AddRandomPointsOnSurface(Surface surface, int count)
      {
        AddPoint(Functions.GetRandomPointsOnSurface(surface, count));
      }

      public void InitControlPoints(Curve[] arg, int Count)
      {
        var result = new List&lt;double&gt;();
        foreach (Curve item in arg)
        {
          for (int i = 0; i &lt; Count; i++) {
            var point = (item.PointAtNormalizedLength(i / (Count - 1)));
            result.Add(point.X);
            result.Add(point.Y);
            result.Add(point.Z);
          }
        }
        Paramaters = new Paramaters(result.Count()); ;
        Paramaters.Init(result.ToArray());
      }
    }

    public interface IParamaters : IEnumerable
    {
      event EventHandler ValueChanged;
      void Init(params double[] arg);
      bool Set(int target, double value);
      double[] ToArray();
      double Get(int target);
      int Count();
      IParamaters[] GetChildParamaters();
    }

    public class ParamatersCombination : IParamaters
    {
      public event EventHandler ValueChanged;
      public IParamaters[] ParamatersMember { get; private set; }

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public double Get(int target)
      {
        int cnt = 0;
        foreach (var item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            return item.Get(target - cnt);
          }
          cnt += item.Count();
        }
        throw new Exception();
      }

      public IEnumerator GetEnumerator()
      {
        foreach (var item in ParamatersMember)
        {
          var itemAr = item.ToArray();
          foreach(var item2 in itemAr)
          {
            yield return item2;
          }
        }
      }

      public void Init(params double[] arg)
      {
        int cnt = 0;
        foreach (var item in this.GetChildParamaters())
        {
          for(int i = 0; i &lt; item.Count(); i++)
          {
            item.Set(i, arg[cnt]);
            cnt++;
          }
        }
        //長すぎる配列分は無視。
      }

      public void Init(params IParamaters[] Ps)
      {
        ParamatersMember = Ps;
      }

      public void AddMember(params Paramaters[] Ps)
      {
        var para = ParamatersMember.ToList();
        para.AddRange(Ps);
        ParamatersMember = para.ToArray();
      }

      public bool Set(int target, double value)
      {
        int cnt = 0;
        foreach (var item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            item.Set(target - cnt, value);
            return true;
          }
          cnt += item.Count();
        }
        return false;
      }

      public double[] ToArray()
      {
        List&lt;double&gt; Result = new List&lt;double&gt;();
        foreach (var item in ParamatersMember)
        {
          Result.AddRange(item.ToArray());
        }
        return Result.ToArray();
      }

      public int Count()
      {
        int result = 0;
        foreach(var item in ParamatersMember)
        {
          result += item.Count();
        }
        return result;
      }

      public IParamaters[] GetChildParamaters()
      {
        List&lt;IParamaters&gt; result = new List&lt;IParamaters&gt;();
        foreach(var item in this.ParamatersMember)
        {
          result.AddRange(item.GetChildParamaters());
        }
        return result.ToArray();
      }
    }

    public class Paramaters : IParamaters
    {
      protected double[] Content;

      public event EventHandler ValueChanged;

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public Paramaters(int Count)
      {
        Content = new double[Count];
      }

      public IEnumerator GetEnumerator()
      {
        foreach(var item in Content)
        {
          yield return item;
        }
      }

      public void Init(params double[] arg)
      {
        Content = arg;
      }

      public bool Set(int target, double value)
      {
        if (Count() &gt; target)
        {
          Content[target] = value;
          return true;
        }
        else
        {
          return false;
        }
      }

      public double[] ToArray()
      {
        return Content;
      }

      public double Get(int target)
      {
        return Content[target];
      }
      public int Count()
      {
        return Content.Count();
      }

      public IParamaters[] GetChildParamaters()
      {
        return new IParamaters[] { this };
      }
    }

    public class Molds
    {
      public abstract class PointSurfaceBase : Mold
      {
        public abstract IParamaters Paramaters { get; }

        public int uCnt = 10, vCnt = 10;
        public Surface GetSurface() {
          return Functions.GetSurfaceFromPoints((u, v) =&gt; { return GetPoint(u, v); }, uCnt, vCnt);
        }
        public abstract Point3d GetPoint(double u, double v);
      }

      public class Plane : Mold
      {
        public IParamaters Paramaters
        {
          get;private set;
        }

        public Plane(double Width, double Height)
        {
          Paramaters = new Paramaters(2);
          Paramaters.Set(0, Width);
          Paramaters.Set(1, Height);
        }

        public Surface GetSurface()
        {
          return new PlaneSurface(Rhino.Geometry.Plane.WorldXY, new Interval(-Paramaters.Get(0) / 2.0, Paramaters.Get(0) / 2.0), new Interval(-Paramaters.Get(1) / 2.0, Paramaters.Get(1) / 2.0));
        }
      }

      public class CubicPolynomial : PointSurfaceBase
      {
        public CubicPolynomial(double width, double height, double a, double b, double c, double d, double e, double f)
        {
          Paramaters.Init(width, height, a, b, c, d, e, f);
        }

        public override IParamaters Paramaters
        {
          get { return _param; }
        }
        private Paramaters _param = new Paramaters(8);
 
        public override Point3d GetPoint(double u, double v)
        {
          double[] p = Paramaters.ToArray();
          return new Point3d(u * p[0] / 2.0, v * p[1] / 2.0, (p[2] * u * u + p[3] * v * v + p[4] * u * u * u + p[5] * u * u * v + p[6] * u * v * v + p[7] * v * v * v) * (p[0] + p[1]) / 2.0);
        }

        public double[] Get6DParamater(int Count)
        {
          double[] p = Paramaters.ToArray();
          return new double[]
            {
            2 / 3 / Math.Sqrt(5) * p[2],2 / 3 / Math.Sqrt(5) * p[3],(p[5] + p[7]) / Math.Sqrt(15),(p[4] + p[6]) / Math.Sqrt(15),Math.Sqrt(8.0 / 15.0) * p[4],Math.Sqrt(8.0 / 15.0) * p[7]
            };
        }
      }
    }

    public class RigidTransformation : ParamaterProvider
    {
      //x,y,z,rx,ry,rz
      public IParamaters Paramaters
      {
        get;private set;
      }

      public RigidTransformation(double x, double y, double z, double rx, double ry, double rz)
      {
        var pc = new ParamatersCombination();
        pc.Init(new Paramaters(3), new Paramaters(3));
        pc.Init(x, y, z, rx, ry, rz);
        Paramaters = pc;
      }

      public Transform ToTransform()
      {
        double[] p = Paramaters.ToArray();
        return Transform.Multiply(Transform.Translation(p[0], p[1], p[2])
          , Transform.Multiply(Transform.Rotation(Math.Atan(p[5]), Vector3d.ZAxis, Point3d.Origin)
          , Transform.Multiply(Transform.Rotation(Math.Atan(p[4]), Vector3d.YAxis, Point3d.Origin)
          , Transform.Rotation(Math.Atan(p[3]), Vector3d.XAxis, Point3d.Origin))));
      }

    }

    public static class Functions
    {
      public static Surface GetSurfaceFromPoints(Func&lt;double,double,Point3d&gt; func, int uCnt, int vCnt)
      {
        List&lt;Point3d&gt; points = new List&lt;Point3d&gt;();
        for (int i = 0; i &lt; uCnt;i++) {
          for (int j = 0; j &lt; vCnt; j++)
          {
            points.Add(func((double) i / (uCnt - 1) * 2 - 1, (double) j / (vCnt - 1) * 2 - 1));
          }
        }
        return (Surface) NurbsSurface.CreateFromPoints(points.ToArray(), uCnt, vCnt, 3, 3);
      }

      static public double GetPointToSurfaceDistance(Point3d point, Surface surface)
      {
        double u, v;
        surface.ClosestPoint(point, out u, out v);
        return surface.PointAt(u, v).DistanceTo(point);
      }

      static public Matrix ArrayToMatrix(double[] arg)
      {
        var result = new Matrix(arg.Count(), 1);
        for(int i = 0; i &lt; arg.Count(); i++)
        {
          result[i, 0] = arg[i];
        }
        return result;
      }

      static public double[] MatrixToArray(Matrix arg)
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        for (int j = 0; j &lt; arg.RowCount; j++)
        {
          for (int i = 0; i &lt; arg.ColumnCount; i++)
          {
            result.Add(arg[j, i]);
          }
        }
        return result.ToArray();
      }

      static public Point3d[] GetRandomPointsOnSurface(Surface surface, int count) {
        Random rd = new Random();
        var result = new Point3d[count];
        for(int i = 0;i &lt; count; i++)
        {
          var dom1 = surface.Domain(0);
          var dom2 = surface.Domain(1);
          result[i] = surface.PointAt(dom1.Min + dom1.Length * rd.NextDouble(), dom2.Min + dom2.Length * rd.NextDouble());
                    
        }
        return result;
      }

      static public double GetSquareSum(double[] arg)
      {
        double result = 0;
        foreach(var item in arg) { result += item;  }
        return result;
      }

      static public Polyline GetSimpleGraph(double[] d)
      {
        double maxValue = double.MinValue;
        double minValue = double.MaxValue;
        foreach(var item in d)
        {
          maxValue = Math.Max(maxValue, item);
          minValue = Math.Min(minValue, item);
        }
        double lenValue = maxValue - minValue;
        var pl = new Polyline(d.Count());
        for (int i = 0; i &lt; d.Count(); i++)
        {
          //pl.Add(new Point3d((double)i / (d.Count() - 1.0), (d[i] - minValue) / lenValue, 0));
          pl.Add(new Point3d((double) i / (d.Count() - 1.0), d[i] / maxValue, 0));
        }

        return pl;
      }

      static public Matrix GaussNewtonMethod(Matrix Jacobian, Matrix EnergyVector, Matrix StatusVector, double ZeroTolerance = 1e-10)
      {
        Matrix M1 = Jacobian.Duplicate();
        M1.Transpose();
        Matrix M2 = M1 * Jacobian;
        M2.Invert(ZeroTolerance);
        M1 = M1 * EnergyVector;
        M1 = M2 * M1;
        M1.Scale(-1);
        return M1;
      }
    }
  }
</item>
                    <item name="Description" type_name="gh_string" type_code="10">A C#.NET scriptable component</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">1516bd78-5b4f-4168-a8ac-051962c566b6</item>
                    <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">C#</item>
                    <item name="OutParameter" type_name="gh_bool" type_code="1">true</item>
                    <item name="ReferenceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ScriptSource" type_name="gh_string" type_code="10">    try{
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Panelling.Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) * 2.0 + Math.Cos(v) * (-2.0)), 15, 15);
      var status = new Panelling.PanellingStatus(target);
      Panelling.Mold mold1, mold2;
      status.AddMold(mold1 = new Panelling.Molds.Plane(15, 15));
      status.AddMold(mold2 = new Panelling.Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new Panelling.RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new Panelling.RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);

      //      target.SetDomain(0, new Interval(0, 1));
      //      target.SetDomain(1, new Interval(0, 1));
      //      for(int i = 0;i &lt; 20;i++){
      //        status.CurveNetworks.AddPoint(target.PointAt(0.5, (double) i / 20));
      //        status.CurveNetworks.AddPoint(target.PointAt((double) i / 20, 0.5));
      //      }
      //
      status.CurveNetworks.AddRandomPointsOnSurface(target, 60);
      //status.TryOptimizationTransform(100, 1.0);
      var dat = status.TryOptimization(100);
      A = status.GetPanels();
      B = target;
      C = status.CurveNetworks.ControlPoints;
      D = Panelling.Functions.GetSimpleGraph(dat);
    }catch(Exception e){
      Print(e.StackTrace);
      Print(e.Message);
    }
</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>63</X>
                          <Y>106</Y>
                          <W>75</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>93</X>
                          <Y>158</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="9">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="7">
                        <chunk name="InputParam" index="0">
                          <items count="9">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable x</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">62f77ee5-4b35-461e-8073-4e1c795f25d5</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>65</X>
                                  <Y>108</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>73</X>
                                  <Y>133</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="9">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable y</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">88dfc31b-c6cc-4f4a-9fee-5e0309a9a7a3</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>65</X>
                                  <Y>158</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>73</X>
                                  <Y>183</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="7">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Print, Reflect and Error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">e1cfe5b9-e187-4fda-b070-3212fba7b590</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>108</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>118</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter A</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">5e90e27c-e3ab-4a47-bd49-1acead6dda91</item>
                            <item name="Name" type_name="gh_string" type_code="10">A</item>
                            <item name="NickName" type_name="gh_string" type_code="10">A</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>128</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>138</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter B</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">a4997db7-c1fc-4397-80a6-5d35ab4c95e2</item>
                            <item name="Name" type_name="gh_string" type_code="10">B</item>
                            <item name="NickName" type_name="gh_string" type_code="10">B</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>148</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>158</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter C</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">30c58457-981f-4b49-b5b0-c7c701578e39</item>
                            <item name="Name" type_name="gh_string" type_code="10">C</item>
                            <item name="NickName" type_name="gh_string" type_code="10">C</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>168</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>178</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter D</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">3e0556f0-9ada-4472-a5c0-696684adefb1</item>
                            <item name="Name" type_name="gh_string" type_code="10">D</item>
                            <item name="NickName" type_name="gh_string" type_code="10">D</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>108</X>
                                  <Y>188</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>122</X>
                                  <Y>198</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">789db356-f5d3-4975-b5cd-95917298a164</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">e1cfe5b9-e187-4fda-b070-3212fba7b590</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="4">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>299</X>
                          <Y>86</Y>
                          <W>600</W>
                          <H>490</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">deaf8653-5528-4286-807c-3de8b8dad781</item>
                <item name="Name" type_name="gh_string" type_code="10">Surface</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic surfaces</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">4e67ac8b-c045-4aee-9473-2ce874d449fb</item>
                    <item name="Name" type_name="gh_string" type_code="10">Surface</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Srf</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">a4997db7-c1fc-4397-80a6-5d35ab4c95e2</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>152</X>
                          <Y>348</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>177.6</X>
                          <Y>358.4</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">deaf8653-5528-4286-807c-3de8b8dad781</item>
                <item name="Name" type_name="gh_string" type_code="10">Surface</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic surfaces</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">5dd343b5-1760-4dcf-9c30-0e36e5b648bd</item>
                    <item name="Name" type_name="gh_string" type_code="10">Surface</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Srf</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">5e90e27c-e3ab-4a47-bd49-1acead6dda91</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>181</X>
                          <Y>301</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>206.4</X>
                          <Y>311.2</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">fbac3e32-f100-4292-8692-77240a42fd1a</item>
                <item name="Name" type_name="gh_string" type_code="10">Point</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of three-dimensional points</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">cbda1666-c8ae-4c37-815f-a18fc719093f</item>
                    <item name="Name" type_name="gh_string" type_code="10">Point</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pt</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">30c58457-981f-4b49-b5b0-c7c701578e39</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>213</X>
                          <Y>264</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>238.4462</X>
                          <Y>274.3076</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">d5967b9f-e8ee-436b-a8ad-29fdcecf32d5</item>
                <item name="Name" type_name="gh_string" type_code="10">Curve</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic curves</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">96e5fe4e-fedc-4fd0-b18c-31ad760c77ef</item>
                    <item name="Name" type_name="gh_string" type_code="10">Curve</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Crv</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">3e0556f0-9ada-4472-a5c0-696684adefb1</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>128</X>
                          <Y>485</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>153.75</X>
                          <Y>495</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="6">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">a9a8ebd2-fff5-4c44-a8f5-739736d129ba</item>
                <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="11">
                    <item name="AdditionalSource" type_name="gh_string" type_code="10">  public class Panelling
  {
    public static object Test() {
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) + Math.Cos(v)), 15, 15);
      var status = new PanellingStatus(target);
      Mold mold1, mold2;
      status.AddMold(mold1 = new Molds.Plane(15, 15));
      status.AddMold(mold2 = new Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);
      status.CurveNetworks.AddRandomPointsOnSurface(target, 10);
      status.TryOptimizationTransform(10, 3.0);
      status.TryOptimization(10, 0.3);
      return status.GetPanels();
    }

    public interface Mold : ParamaterProvider
    {
      Surface GetSurface();
    }

    public interface ParamaterProvider
    {
      IParamaters Paramaters { get; }
    }

    public interface TestProvider
    {
      double[] GetTest();
    }

    public interface JacobianProvider
    {
      Matrix GetJacobian();
    }

    public class PanellingStatus: TestProvider, JacobianProvider,ParamaterProvider
    {
      public Surface TargetSurface;
      public CurveNetworks CurveNetworks = new CurveNetworks();
      public Mold[] MoldDepot { get { return _MoldDepot; } set { _MoldDepot = value; InitParamaters(); } }
      private Mold[] _MoldDepot = new Mold[0];
      public RigidTransformation[] Transformations { get; private set; }
      public Mold[] PanelMoldSelection { get; private set; }

      public PanellingStatus(Surface Target)
      {
        TargetSurface = Target;
        Transformations = new RigidTransformation[0];
        PanelMoldSelection = new Mold[0];

        var para = new ParamatersCombination();
        para.Init(CurveNetworks.Paramaters);
        Paramaters = para;
      }

      public void InitParamaters()
      {
        var result = new List&lt;IParamaters&gt;();
        result.Add(CurveNetworks.Paramaters);
        foreach (var item in MoldDepot)
        {
          result.Add(item.Paramaters);
        }
        foreach(var item in Transformations)
        {
          result.Add(item.Paramaters);
        }

        var para = new ParamatersCombination();
        para.Init(result.ToArray());
        Paramaters = para;

      }

      public Surface GetPanel(int i)
      {
        var surface = PanelMoldSelection[i].GetSurface();
        surface.Transform(Transformations[i].ToTransform());
        return surface;
      }

      public Surface[] GetPanels()
      {
        Surface[] result = new Surface[Transformations.Count()];
        for(int i = 0; i &lt; Transformations.Count(); i++)
        {
          result[i] = GetPanel(i);
        }
        return result;
      }

      public void AddMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        temp.Add(item);
        MoldDepot = temp.ToArray();
      }

      public void RemoveMold(Mold item)
      {
        var temp = MoldDepot.ToList();
        var idx = temp.IndexOf(item);
        temp.RemoveAt(idx);
        MoldDepot = temp.ToArray();
      }

      public void AddPanel(RigidTransformation tr, Mold mold)
      {
        if (!MoldDepot.Contains(mold))
        {
          AddMold(mold);
        }
        var ttr = Transformations.ToList();
        ttr.Add(tr);
        Transformations = ttr.ToArray();

        var tpm = PanelMoldSelection.ToList();
        tpm.Add(mold);
        PanelMoldSelection = tpm.ToArray();
      }

      public IParamaters Paramaters
      {
        get;private set;
      }

      public double[] GetTest()
      {
        var result = new List&lt;double&gt;();
        result.AddRange(TestSurfaceFitting());
        result.AddRange(TestDivergence());
        return result.ToArray();
      }

      public Matrix GetJacobian()
      {
        return GetJacobian(Paramaters);
      }

      public Matrix GetJacobian(IParamaters p)
      {
        var orgtest = GetTest();
        Matrix result = new Matrix(orgtest.Count(), p.Count());
        for(int i = 0; i &lt; p.Count(); i++)
        {
          double dx = 1e-6;
          double val = p.Get(i);
          val += dx;//微分時のdx
          p.Set(i, val);
          var newtest = GetTest();
          val -= dx;
          for(int j = 0; j &lt; orgtest.Count(); j++)
          {
            result[j, i] = (newtest[j] - orgtest[j]) / dx;
          }
        }
        return result;
      }

      public double[] TryOptimization(int count = 1,double Scale=1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();

        Matrix BestMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());//不要
        double BestValue = double.MaxValue;
        for (int i = 0; i &lt; count; i++)
        {
          var paraMatrix = Functions.ArrayToMatrix(Paramaters.ToArray());
          var test = GetTest();
          Matrix m = Functions.GaussNewtonMethod(GetJacobian(), Functions.ArrayToMatrix(test), paraMatrix);
          m.Scale(Scale);
          Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));

          var sqsum = Functions.GetSquareSum(test);
          if (sqsum &lt; BestValue) { BestMatrix = paraMatrix; }
          string sr = "";
          foreach(var d in test){
            sr += d + " ";
          }
          MessageBox.Show(sr);
          history.Add(sqsum);
        }
        Paramaters.Init(Functions.MatrixToArray(BestMatrix));

        return history.ToArray();

      }


      public double[] TryOptimizationTransform(int count = 1, double Scale = 1.0)
      {
        List&lt;double&gt; history = new List&lt;double&gt;();
        for (int i = 0; i &lt; count; i++)
        {
          var test = GetTest();
          for (int j = 0; j &lt; Transformations.Count(); j++)
          {
            var paraMatrix = Functions.ArrayToMatrix(this.Transformations[j].Paramaters.ToArray());
            Matrix m = Functions.GaussNewtonMethod(GetJacobian(Transformations[j].Paramaters), Functions.ArrayToMatrix(test), paraMatrix);
            m.Scale(Scale);
            this.Transformations[j].Paramaters.Init(Functions.MatrixToArray(m + paraMatrix));
          }
          history.Add(Functions.GetSquareSum(test));
        }
        return history.ToArray();
      }


      public double[] TestSurfaceFitting()
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        var controlPoints = CurveNetworks.ControlPoints;
        foreach(var cp in controlPoints)
        {
          result.Add(Functions.GetPointToSurfaceDistance(cp, TargetSurface));
        }
        return result.ToArray();
      }

      public double[] TestDivergence(params Surface[] panels) {
        //fix me
        var panellist = panels.Count() == 0 ? GetPanels() : panels;
        var controlPoints = CurveNetworks.ControlPoints;
        double Length1st = double.MaxValue;
        double Length2nd = double.MaxValue;
        List&lt;double&gt; result = new List&lt;double&gt;();

        foreach (var cp in controlPoints)
        {
          foreach(var panel in panellist)
          {
            double dist = Functions.GetPointToSurfaceDistance(cp, panel);
            if (Length1st &gt; dist)
            {
              Length2nd = Length1st;
              Length1st = dist;
            }
          }
          result.Add(Length1st);
          result.Add(Length2nd);
        }
        return result.ToArray();
      }
    }

    public class CurveNetworks : ParamaterProvider
    {
      public Point3d[] ControlPoints { get
        {
          List&lt;Point3d&gt; result = new List&lt;Point3d&gt;();
          for(int i = 0; i &lt; Paramaters.Count(); i += 3)
          {
            result.Add(new Point3d(Paramaters.Get(i), Paramaters.Get(i + 1), Paramaters.Get(i + 2)));
          }
          return result.ToArray();
        }
      }

      public IParamaters Paramaters
      {
        get; private set;
      }

      public CurveNetworks()
      {
        Paramaters = new Paramaters(0);
      }

      public void AddPoint(params Point3d[] ps)
      {
        var org = Paramaters.ToArray().ToList();
        foreach (var p in ps)
        {
          org.Add(p.X);
          org.Add(p.Y);
          org.Add(p.Z);
        }
        Paramaters.Init(org.ToArray());
      }

      public void AddRandomPointsOnSurface(Surface surface, int count)
      {
        AddPoint(Functions.GetRandomPointsOnSurface(surface, count));
      }

      public void InitControlPoints(Curve[] arg, int Count)
      {
        var result = new List&lt;double&gt;();
        foreach (Curve item in arg)
        {
          for (int i = 0; i &lt; Count; i++) {
            var point = (item.PointAtNormalizedLength(i / (Count - 1)));
            result.Add(point.X);
            result.Add(point.Y);
            result.Add(point.Z);
          }
        }
        Paramaters = new Paramaters(result.Count()); ;
        Paramaters.Init(result.ToArray());
      }
    }

    public interface IParamaters : IEnumerable
    {
      event EventHandler ValueChanged;
      void Init(params double[] arg);
      bool Set(int target, double value);
      double[] ToArray();
      double Get(int target);
      int Count();
    }

    public class ParamatersCombination : IParamaters
    {
      public event EventHandler ValueChanged;
      public IParamaters[] ParamatersMember { get; private set; }

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public double Get(int target)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            return item.Get(target - cnt);
          }
          cnt += item.Count();
        }
        throw new Exception();
      }

      public IEnumerator GetEnumerator()
      {
        foreach (Paramaters item in ParamatersMember)
        {
          var itemArray = item.ToArray();
          foreach(var item2 in itemArray)
          {
            yield return item2;
          }
        }
      }

      public void Init(params double[] arg)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          for(int i = 0; i &lt; item.Count(); i++)
          {
            item.Set(i, arg[cnt]);
            cnt++;
          }
        }
        //長すぎる配列分は無視。
      }

      public void Init(params IParamaters[] Ps)
      {
        ParamatersMember = Ps;
      }

      public void AddMember(params Paramaters[] Ps)
      {
        var para = ParamatersMember.ToList();
        para.AddRange(Ps);
        ParamatersMember = para.ToArray();
      }

      public bool Set(int target, double value)
      {
        int cnt = 0;
        foreach (Paramaters item in ParamatersMember)
        {
          if (cnt &lt;= target &amp;&amp; target &lt; cnt + item.Count())
          {
            item.Set(target - cnt, value);
            return true;
          }
          cnt += item.Count();
        }
        return false;
      }

      public double[] ToArray()
      {
        List&lt;double&gt; Result = new List&lt;double&gt;();
        foreach (Paramaters item in ParamatersMember)
        {
          Result.AddRange(item.ToArray());
        }
        return Result.ToArray();
      }

      public int Count()
      {
        int result = 0;
        foreach(var item in ParamatersMember)
        {
          result += item.Count();
        }
        return result;
      }
    }

    public class Paramaters : IParamaters
    {
      protected double[] Content;

      public event EventHandler ValueChanged;

      protected virtual void OnValueChanged(EventArgs e)
      {
        if (ValueChanged != null) ValueChanged(this, e);
      }

      public Paramaters(int Count)
      {
        Content = new double[Count];
      }

      public IEnumerator GetEnumerator()
      {
        foreach(var item in Content)
        {
          yield return item;
        }
      }

      public void Init(params double[] arg)
      {
        Content = arg;
      }

      public bool Set(int target, double value)
      {
        if (Count() &gt; target)
        {
          Content[target] = value;
          return true;
        }
        else
        {
          return false;
        }
      }

      public double[] ToArray()
      {
        return Content;
      }

      public double Get(int target)
      {
        return Content[target];
      }
      public int Count()
      {
        return Content.Count();
      }
    }

    public class Molds
    {
      public abstract class PointSurfaceBase : Mold
      {
        public abstract IParamaters Paramaters { get; }

        public int uCnt = 10, vCnt = 10;
        public Surface GetSurface() {
          return Functions.GetSurfaceFromPoints((u, v) =&gt; { return GetPoint(u, v); }, uCnt, vCnt);
        }
        public abstract Point3d GetPoint(double u, double v);
      }

      public class Plane : Mold
      {
        public IParamaters Paramaters
        {
          get;private set;
        }

        public Plane(double Width, double Height)
        {
          Paramaters = new Paramaters(2);
          Paramaters.Set(0, Width);
          Paramaters.Set(1, Height);
        }

        public Surface GetSurface()
        {
          return new PlaneSurface(Rhino.Geometry.Plane.WorldXY, new Interval(-Paramaters.Get(0) / 2.0, Paramaters.Get(0) / 2.0), new Interval(-Paramaters.Get(1) / 2.0, Paramaters.Get(1) / 2.0));
        }
      }

      public class CubicPolynomial : PointSurfaceBase
      {
        public CubicPolynomial(double width, double height, double a, double b, double c, double d, double e, double f)
        {
          Paramaters.Init(width, height, a, b, c, d, e, f);
        }

        public override IParamaters Paramaters
        {
          get { return _param; }
        }
        private Paramaters _param = new Paramaters(8);

        public override Point3d GetPoint(double u, double v)
        {
          double[] p = Paramaters.ToArray();
          return new Point3d(u * p[0] / 2.0, v * p[1] / 2.0, (p[2] * u * u + p[3] * v * v + p[4] * u * u * u + p[5] * u * u * v + p[6] * u * v * v + p[7] * v * v * v) * (p[0] + p[1]) / 2.0);
        }

        public double[] Get6DParamater(int Count)
        {
          double[] p = Paramaters.ToArray();
          return new double[]
            {
            2 / 3 / Math.Sqrt(5) * p[2],2 / 3 / Math.Sqrt(5) * p[3],(p[5] + p[7]) / Math.Sqrt(15),(p[4] + p[6]) / Math.Sqrt(15),Math.Sqrt(8.0 / 15.0) * p[4],Math.Sqrt(8.0 / 15.0) * p[7]
            };
        }
      }
    }

    public class RigidTransformation : ParamaterProvider
    {
      //x,y,z,rx,ry,rz
      public IParamaters Paramaters
      {
        get;private set;
      }

      public RigidTransformation(double x, double y, double z, double rx, double ry, double rz)
      {
        Paramaters = new Paramaters(6);
        Paramaters.Init(x, y, z, rx, ry, rz);
      }

      public Transform ToTransform()
      {
        double[] p = Paramaters.ToArray();
        return Transform.Multiply(Transform.Translation(p[0], p[1], p[2])
          , Transform.Multiply(Transform.Rotation(Math.Asin(p[5] % 1), Vector3d.ZAxis, Point3d.Origin)
          , Transform.Multiply(Transform.Rotation(Math.Asin(p[4] % 1), Vector3d.YAxis, Point3d.Origin)
          , Transform.Rotation(Math.Asin(p[3] % 1), Vector3d.XAxis, Point3d.Origin))));
      }

    }

    public static class Functions
    {
      public static Surface GetSurfaceFromPoints(Func&lt;double,double,Point3d&gt; func, int uCnt, int vCnt)
      {
        List&lt;Point3d&gt; points = new List&lt;Point3d&gt;();
        for (int i = 0; i &lt; uCnt;i++) {
          for (int j = 0; j &lt; vCnt; j++)
          {
            points.Add(func((double) i / (uCnt - 1) * 2 - 1, (double) j / (vCnt - 1) * 2 - 1));
          }
        }
        return (Surface) NurbsSurface.CreateFromPoints(points.ToArray(), uCnt, vCnt, 3, 3);
      }

      static public double GetPointToSurfaceDistance(Point3d point, Surface surface)
      {
        double u, v;
        surface.ClosestPoint(point, out u, out v);
        return surface.PointAt(u, v).DistanceTo(point);
      }

      static public Matrix ArrayToMatrix(double[] arg)
      {
        var result = new Matrix(arg.Count(), 1);
        for(int i = 0; i &lt; arg.Count(); i++)
        {
          result[i, 0] = arg[i];
        }
        return result;
      }

      static public double[] MatrixToArray(Matrix arg)
      {
        List&lt;double&gt; result = new List&lt;double&gt;();
        for (int j = 0; j &lt; arg.RowCount; j++)
        {
          for (int i = 0; i &lt; arg.ColumnCount; i++)
          {
            result.Add(arg[j, i]);
          }
        }
        return result.ToArray();
      }

      static public Point3d[] GetRandomPointsOnSurface(Surface surface, int count) {
        Random rd = new Random();
        var result = new Point3d[count];
        for(int i = 0;i &lt; count; i++)
        {
          var dom1 = surface.Domain(0);
          var dom2 = surface.Domain(1);
          result[i] = surface.PointAt(dom1.Min + dom1.Length * rd.NextDouble(), dom2.Min + dom2.Length * rd.NextDouble());

        }
        return result;
      }

      static public double GetSquareSum(double[] arg)
      {
        double result = 0;
        foreach(var item in arg) { result += item;  }
        return result;
      }

      static public Polyline GetSimpleGraph(double[] d)
      {
        double maxValue = double.MinValue;
        double minValue = double.MaxValue;
        foreach(var item in d)
        {
          maxValue = Math.Max(maxValue, item);
          minValue = Math.Min(minValue, item);
        }
        double lenValue = maxValue - minValue;
        var pl = new Polyline(d.Count());
        for (int i = 0; i &lt; d.Count(); i++)
        {
          pl.Add(new Point3d((double) i / (d.Count() - 1.0), (d[i] - minValue) / lenValue, 0));
        }

        return pl;
      }

      static public Matrix GaussNewtonMethod(Matrix Jacobian, Matrix EnergyVector, Matrix StatusVector, double ZeroTolerance = 1e-10)
      {
        Matrix M1 = Jacobian.Duplicate();
        M1.Transpose();
        Matrix M2 = M1 * Jacobian;
        M2.Invert(ZeroTolerance);
        M1 = M1 * EnergyVector;
        M1 = M2 * M1;
        M1.Scale(-1);
        return M1;
      }
    }
  }
</item>
                    <item name="Description" type_name="gh_string" type_code="10">A C#.NET scriptable component</item>
                    <item name="EditorPosition" type_name="gh_drawing_point" type_code="30">
                      <X>30</X>
                      <Y>285</Y>
                    </item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6d609164-0bfd-44f0-9144-81ce1435ad9b</item>
                    <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                    <item name="Name" type_name="gh_string" type_code="10">C# Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">C#</item>
                    <item name="OutParameter" type_name="gh_bool" type_code="1">true</item>
                    <item name="ReferenceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="ScriptSource" type_name="gh_string" type_code="10">    try{
      //return new Molds.CubicPolynomial(10, 10, 0.5, 0.4, 0.2, 0.5, 0.2, 0.1).GetSurface();
      var target = Panelling.Functions.GetSurfaceFromPoints((u, v) =&gt; new Point3d(u * 10, v * 10, Math.Sin(u) * 2.0 + Math.Cos(v) * (-2.0)), 15, 15);
      var status = new Panelling.PanellingStatus(target);
      Panelling.Mold mold1, mold2;
      status.AddMold(mold1 = new Panelling.Molds.Plane(15, 15));
      status.AddMold(mold2 = new Panelling.Molds.CubicPolynomial(15, 15, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
      status.AddPanel(new Panelling.RigidTransformation(-7.5, -7.5, 0, 0, 0, 0), mold1);
      status.AddPanel(new Panelling.RigidTransformation(-7.5, 7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, -7.5, 0, 0, 0, 0), mold2);
      status.AddPanel(new Panelling.RigidTransformation(7.5, 7.5, 0, 0, 0, 0), mold2);

      target.SetDomain(0, new Interval(0, 1));
      target.SetDomain(1, new Interval(0, 1));
      for(int i = 0;i &lt; 20;i++){
        status.CurveNetworks.AddPoint(target.PointAt(0.5, (double) i / 20));
        status.CurveNetworks.AddPoint(target.PointAt((double) i / 20, 0.5));
      }
      //      status.CurveNetworks.AddRandomPointsOnSurface(target, 30);
      //status.TryOptimizationTransform(100, 1.0);
      var dat = status.TryOptimization(10, 0.3);
      A = status.GetPanels();
      B = target;
      C = status.CurveNetworks.ControlPoints;
      D = Panelling.Functions.GetSimpleGraph(dat);
    }catch(Exception e){
      Print(e.StackTrace);
      Print(e.Message);
    }
</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>55</X>
                          <Y>-33</Y>
                          <W>75</W>
                          <H>104</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>85</X>
                          <Y>19</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="9">
                        <item name="InputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="InputId" index="1" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">5</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="2" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="3" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                        <item name="OutputId" index="4" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="7">
                        <chunk name="InputParam" index="0">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable x</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">b92bd730-ea37-40e4-9124-31cb61a2d672</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">x</item>
                            <item name="NickName" type_name="gh_string" type_code="10">x</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>57</X>
                                  <Y>-31</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>65</X>
                                  <Y>-6</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="InputParam" index="1">
                          <items count="10">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script Variable y</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">727f1918-c796-4476-b7a3-ea066ee3e7f3</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">y</item>
                            <item name="NickName" type_name="gh_string" type_code="10">y</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>57</X>
                                  <Y>19</Y>
                                  <W>13</W>
                                  <H>50</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>65</X>
                                  <Y>44</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="8">
                            <item name="Access" type_name="gh_int32" type_code="3">1</item>
                            <item name="Description" type_name="gh_string" type_code="10">Print, Reflect and Error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">21fb7092-dc84-41ba-a0ea-bd4eb5f377e4</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>-31</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>-21</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter A</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">0b02c468-9f91-4cd5-b2af-88988c860266</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">A</item>
                            <item name="NickName" type_name="gh_string" type_code="10">A</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>-11</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>-1</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="2">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter B</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">4848ad6e-767c-4217-92ed-6a7709a833f8</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">B</item>
                            <item name="NickName" type_name="gh_string" type_code="10">B</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>9</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>19</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="3">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter C</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">6ad7107f-66c0-4a3e-a211-9919ed3e0406</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">C</item>
                            <item name="NickName" type_name="gh_string" type_code="10">C</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>29</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>39</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="4">
                          <items count="7">
                            <item name="Description" type_name="gh_string" type_code="10">Output parameter D</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">23b26acb-0325-4172-b193-b435fbf404fd</item>
                            <item name="Locked" type_name="gh_bool" type_code="1">true</item>
                            <item name="Name" type_name="gh_string" type_code="10">D</item>
                            <item name="NickName" type_name="gh_string" type_code="10">D</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>100</X>
                                  <Y>49</Y>
                                  <W>28</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>114</X>
                                  <Y>59</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="5392">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</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>